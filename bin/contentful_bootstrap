#!/usr/bin/env ruby

require 'optparse'
require 'contentful/bootstrap/commands'

options = {}
global = OptionParser.new do |opts|
  opts.banner = "Usage: contentful_bootstrap <command> <space_name> [options]"
  opts.separator ""
  opts.separator <<-HELP
    Available commands are:
      create_space
      generate_token
  HELP
end

subcommands = {
  'create_space' => OptionParser.new do |opts|
    opts.banner = "Usage: init <space_name> [--template TEMPLATE_NAME] [--json-template JSON_PATH] [--config CONFIG_PATH]"
    opts.on("-t TEMPLATE", "--template TEMPLATE", "Specify Template", "blog, catalogue, gallery") do |t|
      options[:template] = t
    end
    opts.on("-j JSON_PATH", "--json-template JSON_PATH", "Specify JSON Template Path") do |j|
      options[:json_template] = j
    end
    opts.on("-c CONFIG_PATH", "--config CONFIG_PATH", "Specify Configuration Path") do |c|
      options[:config_path] = c
    end
  end,
  'generate_token' => OptionParser.new do |opts|
    opts.banner = "Usage: generate_token <space_id> [--name TOKEN_NAME] [--config CONFIG_PATH]"
    opts.on("-n NAME", "--name TEMPLATE", "Specify Token Name") do |n|
      options[:name] = n
    end
    opts.on("-c CONFIG_PATH", "--config CONFIG_PATH", "Specify Configuration Path") do |c|
      options[:config_path] = c
    end
  end
}

global.order!
command = ARGV.shift
space = ARGV.shift

if subcommands.has_key? command
  subcommands[command].order!

  if space.nil? || space.empty?
    puts "Usage: contentful_bootstrap <command> <space_name> [--template TEMPLATE_NAME]"
    puts
    puts "You must provide a valid space name. Exiting!"
    exit
  end

  options[:trigger_oauth] = true

  Contentful::Bootstrap::Commands.new(options.fetch(:config_path, "")).send(command, space, options)
else
  puts "Usage: contentful_bootstrap <command> <space> [options]"
  puts
  puts <<-HELP
    Subcommand not available or missing
    Available commands are:
      create_space
      generate_token
  HELP
end
